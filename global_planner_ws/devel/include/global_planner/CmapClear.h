// Generated by gencpp from file global_planner/CmapClear.msg
// DO NOT EDIT!


#ifndef GLOBAL_PLANNER_MESSAGE_CMAPCLEAR_H
#define GLOBAL_PLANNER_MESSAGE_CMAPCLEAR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace global_planner
{
template <class ContainerAllocator>
struct CmapClear_
{
  typedef CmapClear_<ContainerAllocator> Type;

  CmapClear_()
    : right(false)
    , up(false)
    , left(false)  {
    }
  CmapClear_(const ContainerAllocator& _alloc)
    : right(false)
    , up(false)
    , left(false)  {
  (void)_alloc;
    }



   typedef uint8_t _right_type;
  _right_type right;

   typedef uint8_t _up_type;
  _up_type up;

   typedef uint8_t _left_type;
  _left_type left;





  typedef boost::shared_ptr< ::global_planner::CmapClear_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::global_planner::CmapClear_<ContainerAllocator> const> ConstPtr;

}; // struct CmapClear_

typedef ::global_planner::CmapClear_<std::allocator<void> > CmapClear;

typedef boost::shared_ptr< ::global_planner::CmapClear > CmapClearPtr;
typedef boost::shared_ptr< ::global_planner::CmapClear const> CmapClearConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::global_planner::CmapClear_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::global_planner::CmapClear_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::global_planner::CmapClear_<ContainerAllocator1> & lhs, const ::global_planner::CmapClear_<ContainerAllocator2> & rhs)
{
  return lhs.right == rhs.right &&
    lhs.up == rhs.up &&
    lhs.left == rhs.left;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::global_planner::CmapClear_<ContainerAllocator1> & lhs, const ::global_planner::CmapClear_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace global_planner

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::global_planner::CmapClear_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::global_planner::CmapClear_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::global_planner::CmapClear_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::global_planner::CmapClear_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::global_planner::CmapClear_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::global_planner::CmapClear_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::global_planner::CmapClear_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d5d3676c50ca21d6bdbb6d3621aefaac";
  }

  static const char* value(const ::global_planner::CmapClear_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd5d3676c50ca21d6ULL;
  static const uint64_t static_value2 = 0xbdbb6d3621aefaacULL;
};

template<class ContainerAllocator>
struct DataType< ::global_planner::CmapClear_<ContainerAllocator> >
{
  static const char* value()
  {
    return "global_planner/CmapClear";
  }

  static const char* value(const ::global_planner::CmapClear_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::global_planner::CmapClear_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool right\n"
"bool up\n"
"bool left\n"
;
  }

  static const char* value(const ::global_planner::CmapClear_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::global_planner::CmapClear_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.right);
      stream.next(m.up);
      stream.next(m.left);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CmapClear_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::global_planner::CmapClear_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::global_planner::CmapClear_<ContainerAllocator>& v)
  {
    s << indent << "right: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.right);
    s << indent << "up: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.up);
    s << indent << "left: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.left);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GLOBAL_PLANNER_MESSAGE_CMAPCLEAR_H
